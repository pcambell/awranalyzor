user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # 安全设置
    server_tokens off;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 上游后端服务器池
    upstream backend_pool {
        # 负载均衡算法：least_conn（最少连接）
        least_conn;
        
        # 后端服务器列表
        server backend:8000 max_fails=3 fail_timeout=30s;
        # 如果有多个后端实例，可以添加更多
        # server backend2:8000 max_fails=3 fail_timeout=30s;
        # server backend3:8000 max_fails=3 fail_timeout=30s;
        
        # 健康检查（需要nginx-plus或第三方模块）
        # health_check interval=10s fails=3 passes=2 uri=/api/health/;
        
        # 保持长连接
        keepalive 32;
    }

    # 前端静态文件服务器池
    upstream frontend_pool {
        server frontend:80 max_fails=3 fail_timeout=30s;
        # 如果有多个前端实例
        # server frontend2:80 max_fails=3 fail_timeout=30s;
    }

    # 主服务器配置
    server {
        listen 80;
        server_name localhost;

        # 客户端上传限制
        client_max_body_size 50m;
        client_body_timeout 60s;
        client_header_timeout 60s;

        # 负载均衡器健康检查
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API请求代理到后端池
        location /api/ {
            proxy_pass http://backend_pool;
            
            # 代理头设置
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # 代理缓冲区设置
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
            
            # 超时设置
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_next_upstream_timeout 60s;
            
            # 重试设置
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            
            # HTTP版本和连接保持
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # WebSocket代理（用于实时通信）
        location /ws/ {
            proxy_pass http://backend_pool;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket超时设置
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }

        # 管理后台代理
        location /admin/ {
            proxy_pass http://backend_pool;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 静态文件代理到前端池
        location / {
            proxy_pass http://frontend_pool;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 静态文件缓存
            proxy_cache_valid 200 1h;
            proxy_cache_valid 404 1m;
            
            # 失败转移
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        # 监控端点（Nginx状态）
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }

        # 安全设置 - 禁止访问隐藏文件
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # 错误页面
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # 监控和管理端口（可选）
    server {
        listen 8081;
        server_name localhost;
        
        # 仅允许内网访问
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;

        # 上游状态页面
        location /upstream_status {
            # 需要第三方模块支持
            # upstream_show;
            return 200 "Upstream status monitoring\n";
            add_header Content-Type text/plain;
        }

        # 详细状态信息
        location /status {
            stub_status on;
            access_log off;
        }
    }
} 