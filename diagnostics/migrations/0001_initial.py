# Generated by Django 4.2.16 on 2025-06-02 07:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('awr_upload', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DiagnosticRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_comment='诊断规则的唯一名称', max_length=100, unique=True, verbose_name='规则名称')),
                ('category', models.CharField(db_comment='诊断规则的分类', max_length=50, verbose_name='规则分类')),
                ('description', models.TextField(db_comment='规则的详细描述', verbose_name='规则描述')),
                ('version', models.CharField(db_comment='规则的版本号', default='1.0', max_length=20, verbose_name='规则版本')),
                ('rule_logic', models.JSONField(db_comment='规则的判断逻辑配置', verbose_name='规则逻辑')),
                ('thresholds', models.JSONField(blank=True, db_comment='规则使用的各种阈值参数', default=dict, verbose_name='阈值配置')),
                ('applicable_versions', models.JSONField(blank=True, db_comment='规则适用的Oracle版本列表', default=list, verbose_name='适用版本')),
                ('applicable_environments', models.JSONField(blank=True, db_comment='规则适用的环境类型列表', default=list, verbose_name='适用环境')),
                ('is_active', models.BooleanField(db_comment='规则是否处于激活状态', default=True, verbose_name='是否激活')),
                ('priority', models.PositiveSmallIntegerField(db_comment='规则的执行优先级（1-10，1最高）', default=5, verbose_name='执行优先级')),
                ('execution_count', models.PositiveIntegerField(db_comment='规则的累计执行次数', default=0, verbose_name='执行次数')),
                ('hit_count', models.PositiveIntegerField(db_comment='规则的累计命中次数', default=0, verbose_name='命中次数')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='规则创建时间', verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='规则最后更新时间', verbose_name='更新时间')),
                ('created_by', models.ForeignKey(db_comment='创建此规则的用户', on_delete=django.db.models.deletion.CASCADE, related_name='created_rules', to=settings.AUTH_USER_MODEL, verbose_name='创建用户')),
            ],
            options={
                'verbose_name': '诊断规则',
                'verbose_name_plural': '诊断规则',
                'db_table': 'awranalyzer_diagnostic_rule',
                'db_table_comment': '诊断规则配置表',
                'ordering': ['priority', 'category', 'name'],
                'indexes': [models.Index(fields=['category', 'is_active'], name='awranalyzer_categor_a83db8_idx'), models.Index(fields=['priority'], name='awranalyzer_priorit_14b8bd_idx')],
            },
        ),
        migrations.CreateModel(
            name='AnalysisResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_type', models.CharField(choices=[('performance_issue', '性能问题'), ('resource_bottleneck', '资源瓶颈'), ('configuration_issue', '配置问题'), ('sql_tuning', 'SQL调优'), ('capacity_planning', '容量规划'), ('system_health', '系统健康度'), ('security_check', '安全检查')], db_comment='诊断分析的类型分类', max_length=50, verbose_name='分析类型')),
                ('severity', models.CharField(choices=[('info', '信息'), ('low', '低'), ('medium', '中'), ('high', '高'), ('critical', '严重')], db_comment='问题的严重程度等级', default='info', max_length=20, verbose_name='严重程度')),
                ('rule_name', models.CharField(db_comment='触发此分析结果的诊断规则名称', max_length=100, verbose_name='规则名称')),
                ('rule_category', models.CharField(db_comment='诊断规则的分类', max_length=50, verbose_name='规则分类')),
                ('rule_version', models.CharField(db_comment='诊断规则的版本号', default='1.0', max_length=20, verbose_name='规则版本')),
                ('title', models.CharField(db_comment='分析发现的问题标题', max_length=200, verbose_name='问题标题')),
                ('description', models.TextField(db_comment='详细的问题描述和分析', verbose_name='问题描述')),
                ('impact_description', models.TextField(blank=True, db_comment='问题可能造成的影响描述', null=True, verbose_name='影响说明')),
                ('affected_metrics', models.JSONField(blank=True, db_comment='问题影响的性能指标列表', default=list, verbose_name='受影响指标')),
                ('root_cause', models.TextField(blank=True, db_comment='问题的根本原因分析', null=True, verbose_name='根本原因')),
                ('evidence_data', models.JSONField(blank=True, db_comment='支持诊断结论的证据数据', default=dict, verbose_name='证据数据')),
                ('recommendations', models.JSONField(db_comment='解决问题的建议措施列表', default=list, verbose_name='建议措施')),
                ('priority', models.PositiveSmallIntegerField(db_comment='建议措施的执行优先级（1-10，1最高）', default=5, verbose_name='优先级')),
                ('expected_improvement', models.TextField(blank=True, db_comment='执行建议后的预期改善效果', null=True, verbose_name='预期改善')),
                ('estimated_impact', models.CharField(blank=True, choices=[('low', '低'), ('medium', '中'), ('high', '高')], db_comment='执行建议的预估性能影响程度', max_length=20, null=True, verbose_name='预估影响')),
                ('status', models.CharField(choices=[('new', '新发现'), ('acknowledged', '已确认'), ('in_progress', '处理中'), ('resolved', '已解决'), ('ignored', '已忽略')], db_comment='分析结果的处理状态', default='new', max_length=20, verbose_name='处理状态')),
                ('user_feedback', models.TextField(blank=True, db_comment='用户对分析结果的反馈', null=True, verbose_name='用户反馈')),
                ('feedback_rating', models.PositiveSmallIntegerField(blank=True, choices=[(1, '很差'), (2, '差'), (3, '一般'), (4, '好'), (5, '很好')], db_comment='用户对分析结果的评分（1-5）', null=True, verbose_name='反馈评分')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='分析结果创建时间', verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='分析结果最后更新时间', verbose_name='更新时间')),
                ('assigned_to', models.ForeignKey(blank=True, db_comment='负责处理此问题的用户', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_analysis_results', to=settings.AUTH_USER_MODEL, verbose_name='负责人')),
                ('awr_report', models.ForeignKey(db_comment='关联的AWR报告', on_delete=django.db.models.deletion.CASCADE, related_name='analysis_results', to='awr_upload.awrreport', verbose_name='AWR报告')),
            ],
            options={
                'verbose_name': '分析结果',
                'verbose_name_plural': '分析结果',
                'db_table': 'awranalyzer_analysis_result',
                'db_table_comment': '诊断分析结果表',
                'ordering': ['-severity', 'priority', '-created_at'],
                'indexes': [models.Index(fields=['awr_report', 'severity'], name='awranalyzer_awr_rep_53998d_idx'), models.Index(fields=['analysis_type', 'severity'], name='awranalyzer_analysi_b9c7f5_idx'), models.Index(fields=['status'], name='awranalyzer_status_591606_idx'), models.Index(fields=['priority'], name='awranalyzer_priorit_7bed6c_idx'), models.Index(fields=['rule_name'], name='awranalyzer_rule_na_658323_idx')],
            },
        ),
    ]
